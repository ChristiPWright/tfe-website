<?xml version="1.0" encoding="UTF-8"?>

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="get" noun="CategoryProducts">
        <in-parameters>
            <parameter name="productCategoryId" required="true"/>
        </in-parameters>

        <out-parameters>
            <parameter name="productList" type="List">
                <parameter name="productInfo" type="Map">
                    <parameter name="productId"/>
                    <parameter name="productId"/>
                    <parameter name="pseudoId"/>
                    <parameter name="productName"/>
                    <parameter name="description"/>
                    <parameter name="price" type="BigDecimal"/>
                    <parameter name="priceUomId"/>
                    <parameter name="smallImageInfo" type="Map"/>
                    <parameter name="mediumImageInfo" type="Map"/>
                </parameter>
            </parameter>
        </out-parameters>

        <actions>
            <!-- Get all products in the category -->
            <!-- use the name 'productList' so pagination out-parameters are created automatically -->
            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="productList" cache="true">
                <econdition field-name="productCategoryId" from="productCategoryId" />
            </entity-find>
            <set field="pcmList" from="productList"/>

            <!-- Array to catch out variables from below iterating loop -->
            <set field="productList" from="[]"/>
            
            <!-- For Loop -->
            <!-- Find entity & all associated entities. Get Product, Price, Content -->
            <iterate list="pcmList" entry="pcmp">
                <!-- In each iteration Gets individual product entity -->
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="pcmp.productId"/></entity-find-one>

                <!-- Uses indiv defined product to access imag content image based on productContentTypeEnumID -->
                <set field="smallImageInfo" from="null"/>
                <set field="mediumImageInfo" from="null"/>
                <entity-find entity-name="mantle.product.ProductContent" list="productContentList" cache="true">
                    <econdition field-name="productId" from="pcmp.productId"/>
                </entity-find>

                <!-- Finds all content in the local language -->
                <if condition="locale">
                    <!-- filter after by locale to streamline cached find -->
                    <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                    <set field="productContentList" from="productContentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
                </if>
                <if condition="productContentList">
                    <!-- medium can be PcntImageMedium or PcntImageLarge -->
                    <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageMedium'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="mediumImageInfo == null">
                        <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageLarge'.equals(it.productContentTypeEnumId) })"/></if>
                    <!-- small can be PcntImageSmall or from medium we just looked up -->
                    <set field="smallImageInfo" from="productContentList.find({ 'PcntImageSmall'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="smallImageInfo == null"><set field="smallImageInfo" from="mediumImageInfo"/></if>
                </if>
                <script>productList.add([productId:pcmp.productId,pseudoId:product.pseudoId,productName:product.productName, description:product.description, price:product.prices.price[0],priceUomId:product.prices.priceUomId[0],smallImageInfo:smallImageInfo, mediumImageInfo:mediumImageInfo])</script>
            </iterate>

        </actions>
    </service>

    <service verb="get" noun="ProductInfo">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="priceUomId"/>
            <parameter name="locale" default="ec.user.locale?.toString()"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.product.Product" include="nonpk"/>

            <parameter name="price" type="BigDecimal"/>
            <parameter name="listPrice" type="BigDecimal"/>
            <parameter name="priceUomId"/>
            <parameter name="productId"/>
            <parameter name="prodDescription"/>

            <parameter name="descriptionLong"/>
            <parameter name="descriptionSmall"/>
            <parameter name="contentList" type="List">
                <parameter name="content" type="Map">
                    <parameter name="productContentId"/>
                    <parameter name="productContentTypeEnumId"/>
                    <parameter name="productContentLocation"/>
                    <parameter name="description"/>
                    <parameter name="sequenceNum"/>
                </parameter>
            </parameter>

            <parameter name="standardFeatureList" type="List">
                <parameter name="dimension" type="Map"/>
            </parameter>
            <parameter name="productAvailability"/>
            <parameter name="productQuantity"/>
            <parameter name="productStoreId"/>

        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return error="true" message="Product not found with ID ${productId}"/></if>
            <script>context.putAll(product)</script>

            <service-call name="tfe-website.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>

            <set field="price" from="product.prices.price[0]"/>
            <set field="priceUomId" from="product.prices.priceUomId[0]"/>

            <set field="productStoreId" from="product.categories.stores.store.productStoreId[0]"/>
            <set field="productAvailability" from="product.assets.statusId" />
            <set field="productQuantity" from="product.assets.quantityOnHandTotal ? product.assets.quantityOnHandTotal : 0"/>
            <set field="prodDescription" from="product.description" />

            <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="standardFeatureList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <econdition field-name="applTypeEnumId" value="PfatStandard"/>
                <order-by field-name="productFeatureTypeEnumId"/><order-by field-name="description"/>
            </entity-find>

            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>

             
            <!-- some content types may have more than one record, long description just has one -->
            <set field="descLongLocation" from="contentList.find({ 'PcntDescriptionLong' == it.productContentTypeEnumId })?.contentLocation"/>
            <if condition="descLongLocation"><set field="descriptionLong" from="ec.resource.getLocationText(descLongLocation, true)"/></if>

            <set field="descSmallLocation" from="contentList.find({ 'PcntDescription' == it.productContentTypeEnumId })?.contentLocation"/>
            <if condition="descSmallLocation"><set field="descriptionSmall" from="ec.resource.getLocationText(descSmallLocation, true)"/></if>
            <!-- <set field="imageSmallList" from="contentList.findAll({ 'PcntImageSmall' == it.productContentTypeEnumId })"/> -->

        </actions>
    </service>

    

    <service verb="get" noun="ProductVariantsDisplayInfo">
        <in-parameters>
            <parameter name="productId">
                <description>Only id of a virtual product make sense to get relevant data.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="featureType"></parameter>
            <parameter name="variantOptions" type="Map">
                <description>
                    A map where key is feature type (Enumeration) and value is another map
                    with productId, description and price data exactly as it returned by get#ProductPrice.
                </description>
            </parameter>
            <parameter name="minimalPrice" type="BigDecimal">
                <description>Minimal price among all variants.</description>
            </parameter>
            <parameter name="maximalPrice" type="BigDecimal">
                <description>Maximal price among all variants.</description>
            </parameter>
            <parameter name="isDiscounted" type="Boolean">
                <description>We use this flag in UI to emphasis discounted products if they are variants</description>
            </parameter>
            <parameter name="listFeatures"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>

            <set field="variantOptions" type="NewMap" value="null"/>
            <script>variantOptions = new HashMap()</script>
            <set field="minimalPrice" type="BigDecimal" value="0"/>
            <set field="maximalPrice" type="BigDecimal" value="0"/>
            <set field="isDiscounted" type="Boolean" value="false"/>

            <service-call name="mantle.product.PriceServices.get#ProductPrice" in-map="context" out-map="mainPriceSet" />

            <if condition="product &amp;&amp; product.productTypeEnumId == 'PtVirtual'">
                <entity-find entity-name="mantle.product.ProductAssocAndToFeatureAppl" list="assocs">
                    <econdition field-name="productAssocTypeEnumId" value="PatVariant"/>
                    <econdition field-name="applTypeEnumId" operator="in" value="PfatDistinguishing, PfatStandard" />
                    <econdition field-name="productId" from="product.productId"/>
                    <date-filter/>
                </entity-find>
                <set field="listFeatures" type="NewMap" value="null"/>
                <script>listFeatures = new HashMap()</script>
                <iterate list="assocs" entry="variantProductAssoc">
                    <!-- find variant price first -->
                    <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceSet"
                            in-map="context + [productId:variantProductAssoc.toProductId]" />
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="features">
                        <date-filter/>
                        <econdition field-name="productId" from="variantProductAssoc.toProductId"/>
                        <econdition field-name="productFeatureId" from="variantProductAssoc.productFeatureId"/>
                    </entity-find>

                    <!-- we return map keyed by feature type and should find the proper value for the assoc -->
                    <entity-find-one entity-name="mantle.product.feature.ProductFeature" value-field="productFeature" cache="true">
                        <field-map field-name="productFeatureId" from="variantProductAssoc.productFeatureId"/>
                    </entity-find-one>
                    <service-call name="tfe-website.ProductServices.get#ProductQuantity" out-map="productQuantity" in-map="[productId:variantProductAssoc.toProductId]"/>
                    <entity-find-one entity-name="moqui.basic.Enumeration" value-field="featureType" cache="true">
                        <field-map field-name="enumId" from="productFeature.productFeatureTypeEnumId"/>
                    </entity-find-one>
                    <set field="item" from="[enumId:featureType.enumId, enumTypeId:featureType.enumTypeId, 
                        description:featureType.description, lastUpdatedStamp:featureType.lastUpdatedStamp]"/> 
                    <set field="content" from="[productFeatureTypeEnumId:productFeature.productFeatureTypeEnumId, 
                        description:featureType.description]"/>
                    <script><![CDATA[
                        selectedPrices = (priceSet.price != null && priceSet != 0) ? priceSet : mainPriceSet
                        // we use this flag in UI to emphasis discounted products but important to know if any of variants of discounted
                        if (!isDiscounted) {
                            isDiscounted = (selectedPrices.price && selectedPrices.listPrice) ? selectedPrices.price < selectedPrices.listPrice : false
                        }
                        
                        def featureSet = listFeatures.get(content)
                        if (!featureSet) {
                            listFeatures.put(content, 
                            [[productFeatureId:productFeature.productFeatureId, 
                            productFeatureTypeEnumId:productFeature.productFeatureTypeEnumId, 
                            description:productFeature.description, abbrev:productFeature.abbrev, price:selectedPrices]])
                        } else {
                            boolean isItemInList = false
                            for(int i=0; i < featureSet.size(); i++) {
                                if(featureSet.get(i).productFeatureId.equals(productFeature.productFeatureId)) {
                                    isItemInList = true
                                    break
                                } 
                            }
                            if(!isItemInList) {
                                featureSet.add([productFeatureId:productFeature.productFeatureId, 
                                productFeatureTypeEnumId:productFeature.productFeatureTypeEnumId, 
                                description:productFeature.description, abbrev:productFeature.abbrev, price:selectedPrices])
                            }
                        }

                        def optionSet = variantOptions.get(item)
                        if (!optionSet) {
                            variantOptions.put(item, [[productId: variantProductAssoc.toProductId, description:productFeature.description, quantity: productQuantity.productQuantity,
                            prices:selectedPrices]])
                        } else {
                            optionSet.add([productId: variantProductAssoc.toProductId, description:productFeature.description, quantity: productQuantity.productQuantity,
                            prices:selectedPrices])
                        }
                        priceSet = null
                    ]]></script>
                </iterate>

                <!-- sort variants by price and store minimal price -->
                <script><![CDATA[
                    variantOptions.each{k, v ->
                        Collections.sort(v, new Comparator<Map>() {
                            int compare(Map m1, Map m2) {
                                def price1 = m1.prices.price?:0
                                def price2 = m2.prices.price?:0
                                return price1.compareTo(price2)
                            }
                        })
                        minimalPrice = v.get(0).prices.price
                        maximalPrice = v.get(v.size() - 1).prices.price
                    }
                ]]></script>

                <else>
                    <set field="minimalPrice" type="BigDecimal" from="mainPriceSet.price"/>
                    <set field="maximalPrice" type="BigDecimal" from="mainPriceSet.price"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="get" noun="CategoryInfo">
        <in-parameters>
            <parameter name="productCategoryId" required="true"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.product.category.ProductCategory" include="nonpk"/>
            <parameter name="subCategoryList" type="List"><parameter name="categoryInfo" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <log message="tfe-website/product::::categoryInfo-----------------------${categoryInfo}--------------------------------------" />
            <service-call name="tfe-website.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>

            <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true"/>
            <if condition="productCategory == null"><return error="true" message="Category not found with ID ${productCategoryId}"/></if>
            <script>context.putAll(productCategory)</script>

            <entity-find entity-name="mantle.product.category.ProductCategoryRollup" list="rollupList" cache="true">
                <date-filter/><econdition field-name="parentProductCategoryId" from="productCategoryId"/>
                <order-by field-name="sequenceNum"/>
            </entity-find>

            <set field="subCategoryList" from="[]"/>
            <iterate list="rollupList" entry="rollup">
                <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true">
                    <field-map field-name="productCategoryId" from="rollup.productCategoryId"/></entity-find-one>
                <!-- TODO: ProductCategoryContent for smallImageInfo -->
                <script>subCategoryList.add([productCategoryId:productCategory.productCategoryId, pseudoId:productCategory.pseudoId,
                        categoryName:productCategory.categoryName, description:productCategory.description,
                        smallImageInfo:smallImageInfo, sequenceNum:rollup.sequenceNum])</script>
            </iterate>
        </actions>
    </service>
</services>